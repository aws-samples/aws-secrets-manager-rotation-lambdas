{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "ProjectFolder": {
      "Default": "SecretRotator.LetsEncryptAccountKey",
      "Type": "String"
    },
    "FunctionClassName": {
      "Default": "LetsEncryptAccountKeySecretRotationFunction",
      "Type": "String"
    },
    "SecretName": {
      "Default": "LetsEncryptAccountKey",
      "Type": "String"
    },
    "BuildProjectName": {
      "Default": "LetsEncryptBuildProject",
      "Type":  "String" 
    }
  },
  "Resources": {
    "BuiltCodeBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": { "Fn::Sub": "built-code-${AWS::AccountId}-${AWS::Region}" }
      }
    },
    "BuildProjectRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "codebuild.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "S3",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "s3:*",
                  "Resource": {
                    "Fn::Sub": "arn:aws:s3:::${BuiltCodeBucket}/*"
                  }
                }
              ]
            }
          }
        ],
        "RoleName": "BuildProjectRole"
      }
    },
    "SecretRotationFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "Lambda",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "SecretsManager",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "secretsmanager:DescribeSecret",
                    "secretsmanager:GetSecretValue",
                    "secretsmanager:PutSecretValue",
                    "secretsmanager:UpdateSecretVersionStage"
                  ],
                  "Resource": "*",
                  "Condition": {
                    "StringEquals": {
                      "secretsmanager:resource/AllowRotationLambdaArn": { "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FunctionClassName}" }
                    }
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "secretsmanager:GetRandomPassword"
                  ],
                  "Resource": "*"
                },
                {
                  "Action": [
                    "ec2:CreateNetworkInterface",
                    "ec2:DeleteNetworkInterface",
                    "ec2:DescribeNetworkInterfaces"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ]
            }
          }
        ],
        "RoleName": { "Fn::Sub": "${FunctionClassName}Role" }
      }
    },
    "Secret": {
      "Type": "AWS::SecretsManager::Secret",
      "Properties": {
        "SecretString": "{}",
        "Name": {
          "Fn::Sub": "${SecretName}/${AWS::StackName}"
        }
      }
    },
    "SecretRotationSchedule": {
      "Type": "AWS::SecretsManager::RotationSchedule",
      "Properties": {
        "RotationLambdaARN": { "Fn::GetAtt": [ "SecretRotationFunction", "Arn" ] },
        "RotationRules": {
          "AutomaticallyAfterDays": 7
        },
        "SecretId": { "Ref": "Secret" }
      },
      "DependsOn": [ "SecretRotationFunctionPermission" ]
    },
    "SecretRotationFunctionPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Fn::GetAtt": [ "SecretRotationFunction", "Arn" ] },
        "Principal": "secretsmanager.amazonaws.com"
      }
    },
    "CustomResourceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "CodeBuild",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "codebuild:StartBuild",
                  "Resource": { "Fn::GetAtt": [ "BuildProject", "Arn" ] }
                }
              ]
            }
          }
        ],
        "RoleName": { "Fn::Sub": "${FunctionClassName}CustomResourceRole" }
      }
    },
    "Custom": {
      "Type": "Custom::CustomResource",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt": [ "CustomResourceFunction", "Arn" ] },
        "BuildProjectName": { "Ref": "BuildProjectName" }
      },
      "DependsOn": [ "BuildProject", "CustomResourceFunction" ]
    },
    "CustomResourceFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": { "Fn::Sub": "${FunctionClassName}CustomResource" },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [ "CustomResourceRole", "Arn" ]
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "var AWS = require('aws-sdk');",
                "var codebuild = new AWS.CodeBuild();",
                "exports.handler = async function(event, context, callback) {",
                "try {",
                "console.log('REQUEST RECEIVED:' + JSON.stringify(event));",
                "if (event.RequestType === 'Create') {",
                "console.log('CREATE!');",
                "var params = {",
                "projectName: event.ResourceProperties.BuildProjectName",
                "};",
                "var buildResp = await codebuild.startBuild(params).promise();",
                "console.log(JSON.stringify(buildResp));",
                "console.log(\"Waiting..\");",
                "await wait(120 * 1000);",
                "console.log(\"Done waiting.\");",
                "await sendResponse(event, context, 'SUCCESS', { 'Message': 'Resource creation successful!' });",
                "} else if (event.RequestType === 'Update') {",
                "console.log('UDPATE!');",
                "await sendResponse(event, context, 'SUCCESS', { 'Message': 'Resource update successful!' });",
                "} else if (event.RequestType === 'Delete') {",
                "console.log('DELETE!');",
                "await sendResponse(event, context, 'SUCCESS', { 'Message': 'Resource deletion successful!' });",
                "} else {",
                "console.log('FAILED!');",
                "await sendResponse(event, context, 'FAILED');",
                "}",
                "} catch (error) {",
                "console.log('ERROR!');",
                "console.log(error);",
                "await sendResponse(event, context, 'FAILED', error);",
                "}",
                "};",
                "async function sendResponse(e, ctx, rs, rd) {",
                "return new Promise(function (resolve) {",
                "var body = JSON.stringify({",
                "Status: rs,",
                "Reason: 'See the details in CloudWatch Log Stream: ' + ctx.logStreamName,",
                "PhysicalResourceId: ctx.logStreamName,",
                "StackId: e.StackId,",
                "RequestId: e.RequestId,",
                "LogicalResourceId: e.LogicalResourceId,",
                "NoEcho: false,",
                "Data: rd",
                "});",
                "var h = require(\"https\");",
                "var u = require(\"url\");",
                "var p = u.parse(e.ResponseURL);",
                "var req = h.request({",
                "hostname: p.hostname,",
                "port: 443,",
                "path: p.path,",
                "method: \"PUT\",",
                "headers: {",
                "'content-type': '',",
                "'content-length': body.length",
                "}",
                "}, resp => { resolve(); });",
                "req.write(body);",
                "req.end();",
                "});",
                "}",
                "function wait(timeout) {",
                "return new Promise((resolve) => {",
                "setTimeout(() => {",
                "resolve();",
                "}, timeout);",
                "});",
                "}"
              ]
            ]
          }
        },
        "MemorySize": 128,
        "Timeout":  300, 
        "Runtime": "nodejs12.x"
      }
    },
    "SecretRotationFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": { "Ref": "FunctionClassName" },
        "Handler": { "Fn::Sub": "${ProjectFolder}::${ProjectFolder}.${FunctionClassName}::Handler" },
        "Role": {
          "Fn::GetAtt": [ "SecretRotationFunctionRole", "Arn" ]
        },
        "Code": {
          "S3Bucket": { "Ref": "BuiltCodeBucket" },
          "S3Key": { "Fn::Sub": "BuiltCode/${ProjectFolder}.zip" }
        },
        "MemorySize": 128,
        "Timeout": 60,
        "Runtime": "dotnetcore2.1"
      },
      "DependsOn": [ "Custom" ] 
    },
    "BuildProject": {
      "Type": "AWS::CodeBuild::Project",
      "Properties": {
        "Name": {"Ref":  "BuildProjectName" },
        "Artifacts": {
          "Type": "NO_ARTIFACTS"
        },
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_SMALL",
          "Type": "LINUX_CONTAINER",
          "Image": "aws/codebuild/standard:2.0",
          "EnvironmentVariables": [
            {
              "Name": "ProjectPath",
              "Value": "SecretsManagerDotNetSecretRotator/Source/",
              "Type": "PLAINTEXT"
            },
            {
              "Name": "GitHubProject",
              "Value": "aws-secrets-manager-rotation-lambdas",
              "Type": "PLAINTEXT"
            },
            {
              "Name": "GitHubAccount",
              "Value": "aws-samples",
              "Type": "PLAINTEXT"
            },
            {
              "Name": "S3Bucket",
              "Value": { "Ref": "BuiltCodeBucket" },
              "Type": "PLAINTEXT"
            },
            {
              "Name": "S3Path",
              "Value": "BuiltCode/",
              "Type": "PLAINTEXT"
            },
            {
              "Name": "ProjectFolder",
              "Value": { "Ref": "ProjectFolder" },
              "Type": "PLAINTEXT"
            }
          ]
        },
        "ServiceRole": { "Ref": "BuildProjectRole" },
        "Source": {
          "BuildSpec": {
            "Fn::Join": [
              "\n",
              [
                "version: 0.2",
                "phases:",
                "  install:",
                "    runtime-versions:",
                "      dotnet: 2.2",
                "  pre_build:",
                "    commands:",
                "       - git clone https://github.com/$GitHubAccount/$GitHubProject",
                "       - echo '{\"runtimeOptions\":{\"tfm\":\"netcoreapp2.1\",\"framework\":{\"name\":\"Microsoft.NETCore.App\",\"version\":\"2.1.0\"}}}' > $ProjectFolder.runtimeconfig.json",
                "  build:",
                "    commands:",
                "       - dotnet publish $GitHubProject/$ProjectPath$ProjectFolder -c Release",
                "  post_build:",
                "    commands:",
                "       - zip -r -j $ProjectFolder.zip $GitHubProject/$ProjectPath$ProjectFolder/bin/Release/netcoreapp2.1/publish $ProjectFolder.runtimeconfig.json",
                "       - aws s3 cp $ProjectFolder.zip s3://$S3Bucket/$S3Path$ProjectFolder.zip"
              ]
            ]
          },
          "Type": "NO_SOURCE"
        }
      }
    }
  }
}
